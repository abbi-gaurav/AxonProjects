* cqrs principle
** Instead of separating logic into separate layers, logic is separated based on whether it is changing an application's state or querying it.
* gurantees
** delivering events to the right event listeners and processing them concurrently and in the correct order
** Duplicate data is no longer an issue, since events are published when data changes. :doubt:
* threads management
** Axon abstracts all asynchronous behavior by using Executors, meaning that you can easily pass a container managed Thread Pool, for example
* contact for doubts
** axonframework@googlegroups.com
** [[http://www.axonframework.org/issues][log a bug]]
* command handling
** Command Bus receives commands and routes them to the Command Handlers
** command gateway
*** default
*** You can turn almost any interface into a Command Gateway using the GatewayProxyFactory
**** strong typing and business exceptions
**** using code
**** using spring
*** configuration
**** command bus
***** commands ----> command handler
***** always have 1 -> 1 mapping
***** sync and asynchronous versions
***** simplecommandbus
***** dispatchcommandbus (perf tuning)
***** can bind a Transaction manager
***** distributing the command bus
****** DistributedCommandBus
******* CommandBusConnector(JGroupsConnector)
******** JGroupsConnectorFactoryBean with spring
******* RoutingStrategy (MetaDataRoutingStrategy | AnnotationRoutingStrategy [uses @TargetAggregateIdentifier])
****** axon-distributed-commandbus maven
**** optional
***** retry scheduler                                          :optional:
****** only retries for Runtime exceptions
***** CommandDispatchInterceptors
****** before sending to command bus
***** CommandCallbacks
****** for each command sent
** command handlers
*** do not user server-generated ids
*** prefer fire and forget approach
*** using spring and annotations
**** <axon:annotation-config/>
*** AggregateAnnotationCommandHandler
**** When a command creates an aggregate instance, the callback for that command will receive the aggregate identifier when the command executed successfully.
**** using spring <axon:aggregate-command-handler/>
***** element in your application context to create a Command Handler that delegates commands to an aggregate instance. It will also be automatically subscribed to the CommandBus.
**** @CommandHandlingMember
***** for having commandhandler annotation in the delegator or member entities
** command interceptors
*** Command Dispatch Interceptors, can be used for
**** structural validation
**** BeanValidationInterceptor, JSR 303 Bean validation
*** Command Handler Interceptors
* Domain modelling 
** The command handler retrieves domain objects (Aggregates) from a repository and executes methods on them to change their state.
** state change results in domain events
** domain model = aggregates + domain events
** DomainEventMessage
*** raised by an aggregate
*** contains the identifier of the aggregate also
*** sequence number
** prefer immutable domain events
** abstrcat to capture the fact and the concrete to capture the type of state change for the event
** aggregate
*** An Aggregate is an entity or group of entities that is always kept in a consistent state
*** always do changes via the root aggregate
*** AbstractAnnotatedAggregateRoot
*** Event sourced aggregates
*** the requirement is that the identifier is set when the first event is applied or registered with the aggregate. Axon needs that identifier to attach it to the event. :important:
** live and historic events
* repositories
** access to aggregates by a unique identifier based lookup
** also backup changes
** two types
*** Standard repositories : save current state of aggregate
**** event ordering
***** no gurantee in optimistic locking
***** must use pessimistic locking strategy
*** Even Sourcing Repositories: save events of the aggregate
**** uses the concept of Event Store
** event store
*** serializer xml and json
*** MongoDB Event Store : axon-mongo
**** StorageStrategy: how events are stored in documents (default each event in a separate document) other: DocumentPerCommitStorageStrategy
* event processing and event bus
** event bus dispatches events to all event listeners
** synchronous and asynchronous
** event handlers
*** update data source used for querying
*** do other actions
*** send new commands
** types
*** simple
*** clustering
**** for spring : <axon:cluster>
**** event bus terminal (e.g using AMQP)
***** forms the bridge between the Clusters inside the Event Bus
**** event listeners
***** Event Listeners that require information managed by another Listener should be in the same cluster
***** Order resolver
***** Annotated Event Handler
***** *one event handler method is invoked per listener instance.*
**** event processing
***** Asynchronous Event Processing
***** you can place a Spring <bean> element inside the <axon:cluster>
***** specify the bean configuration of an AsynchronousCluster implementation to make a Cluster asynchronous.
****** concurrency policies
* querying for data
** thin data layer
** table per view principle
* modules
** core
** axon test
** Axon Distributed CommandBus
** Axon AMQP (Advanced Message Queuing Protocol)
** Axon Mongo
* notes
** *Aggregates are domain objects*
